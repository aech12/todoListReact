{"version":3,"sources":["components/List.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","value","onClick","react_default","a","createElement","List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","list","state","length","setState","console","log","handleChange","target","deleteItem","i","splice","_this2","todos","map","todo","List_Item","key","onSubmit","onChange","type","Component","App","className","components_List","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fb7f2758.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst Item = ({value, onClick}) => {\r\n\treturn <li onClick={onClick}>{value}</li>\r\n}\r\n\r\nclass List extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: '',\r\n\t\t\tlist: ['one', 'twoo', 'threee']\r\n\t\t}\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tlet list = this.state.list;\r\n\t\tlist[this.state.list.length] = this.state.value;\r\n\t\tthis.setState({list, value:''})\r\n\t\tconsole.log(this.state.list)\r\n\t}\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({value: e.target.value})\r\n\t}\r\n\r\n\tdeleteItem = (i) => {\r\n\t\tlet list = this.state.list;\r\n\t\tlist.splice(i, 1);\r\n\t\tthis.setState({list});\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst todos = \r\n\t\tthis.state.list.map((todo, i)=> (\r\n\t\t\t<Item value={todo} key={i} onClick={()=> this.deleteItem(i)}/>\r\n\t\t))\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tvalue={this.state.value}\r\n\t\t\t\t\t\tonChange={this.handleChange}/>\r\n\t\t\t\t\t<button type='submit'>ADD</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{todos}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './components/List';\n// import Labels from './components/Labels';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <List/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}